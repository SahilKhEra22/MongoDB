Aggregation part 1

aggregation means to write Aggregate query
aggregate query means a pipeline Operation


* Aggregation:- 
it groups the data from multiple documents into a single document based on the specified expression

* Aggregation Pipeline:-
The aggregation process in mongodb consist of several stages, each stage consist of several stages, each stage transforming the data in some way.

the output of one stage is fed as the input to the next stage, and so on, until the final stage produces the desired result.

mongodb provides several built-in aggregation pipeline stages to perform various operations on the data, such as $group, $sum, $avg, $min ,$max etc.

we can achieve all that with this query 
**syntax:-
db.collection.aggregate(pipeline,options) // aggregate has two arguments

pipeline -> array of different operations that we want to do 
             like:- first we want match then group then sort etc

options -> it can we anything 
           like :- explain:true,allowDiskUse:true etc

ex:-
1. search all doc which has gender male
db.collection.aggregate([{$match:{gender:"male"}}]) // this will return all docs in which gender will be male 
aggregate's first argument is a pipline



* syntax of $group operator:- 
$group:{_id:expression,field1:expression,field2:expression,...}

_id :- field on which we want to create index
field1: :- which field we want in result and write the value of field in expression
field2 :- which we want in expression and its value

 
2. group teachers by age

db.collection.aggregate([{$group:{_id:"$age"}}])  

* $group operator is one of the operators of pipline used for grouping and it also has a _id field itself 
** with this query we want all doc in which age is 10 will be in same group, all the doc which has age 20 will be in other same group and so on
** here we are using $age to tell mongodb that age is a field in collection

I The $group operator groups documents by the age field, creating a new document for each unique age value.

II The _id field in the group stage specifies the field based on which the documents will be grouped.

III In output we will get groups


3. Group teachers by age and show all teachers names per age group 

db.teachers.aggregate([{$group:{_id:"$age",names:{$push:"$name"}}}])
The names field uses the $push operator to add the name field from each document in the group to an array 


4. group teaches by age and also show complete document per age group

db.collection.aggregate([{$group:{_id:$age,pooraDoc:{$push:"$$ROOT"}}])

$$ROOT -> represents the current document

The $$ROOT value is a reference to the current document being processed in the pipeline, which represents the complete document 

5. give a count per age of male teacher

 suppose we have two group age20 and age30 || we want to see how many male teachers are there in age20 group 

db.collection.aggregate([{$match:{gender:"male"}},{$group:{_id:"$age",number:{$sum:1}}}])

1.in first stage select all docs which will have male gender
now give the result or those docs to second operator $group
2.in second stage group all those docs according to age
in number field  result of sum will be mentioned as its value
3.The vale of $sum is 1, which means that for each doc in the group, the value of number will be incremented by 1 , effectively counting the number of documents per age group.
                       
                        or
3. $sum will show how many doc are present there in a group
  ex:- {_id:40,number:4} -> here it is showing that in group of age 40 4 docs are present 

*this will increment the value of number by 2 based on doc present in a group
means if there were 4 doc in a group then for each doc the value of number is incremented by 2 so value of number will be 8
db.collection.aggregate([{$match:{gender:"male"}},{$group:{_id:"$age",number:{$sum:2}}}])


6. give a count per age of male students and sort them by count in desc manner 

db.collection.aggregate([{$match:{gender:"male"}},{$group:{_id:"$age",numberOfStudents:{$sum:1}}},{$sort:{numberOfTeachers:-1}}])

*we can create pipeline as much as we want 

7. one more example

db.collection.aggregate([{$match:{gender:"male"}},{$group:{_id:"$age",numberofTeachers:{$sum:1}}},{$sort:{numberofTeachers:-1}},{$group:{_id:null,maxNumberInAnAgeGroup:{$max:"$numberOfTeachers"}}}])


{$group:{_id:null,maxNumberInAnAgeGroup:{$max:"$numberOfTeachers"}}} :-
this stage will group result of all previous stages in one document

_id null means no need to group the documents by any specific field, The result will be a single document

maxNumberInAnAgeGroup: The $max operator finds the maximum value in the numberofTeachers field from the previous stage.

 


